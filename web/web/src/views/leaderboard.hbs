{{> start }}
  <h1>Leaderboard</h1>
  <div class="chart-container" style="position: relative; height:40vh; width:80vw">
      <canvas id="chart"></canvas>
  </div>
  <script>
   // https://stackoverflow.com/a/16348977/1779927
   function stringToColor(str) {
     let hash = 0;
     for (let i = 0; i < str.length; i++) {
       hash = str.charCodeAt(i) + ((hash << 5) - hash);
     }
     let color = '#';
     for (let i = 0; i < 3; i++) {
       let value = (hash >> (i * 8)) & 0xFF;
       color += ('00' + value.toString(16)).substr(-2);
     }
     return color;
   }

   const ctx = document.getElementById("chart").getContext('2d');
   const chart = new Chart(ctx, {
     type: 'line',
     data: {
       labels: [],
       datasets: []
     },
     options: {
       scales: {
         yAxes: [{ticks: {beginAtZero: true}}],
         xAxes: [{
           display: true,
           scaleLabel: {
             display: true,
             labelString: 'Rounds'
           }
         }],
       }
     }
   });

   function transformData (data) {
     data.teams = data.teams.map(t => {
       t.scores = [];
       let score = 0;
       for (let round = 0; round <= data.round; ++round) {
         score += data.games.reduce((acc, g) => {
           // Score's rule
           if (g.round === round) {
             if (g.grade0 === t.id) {
               acc += 1;
             }
             return acc;
           }
           return acc;
         }, 0);
         t.scores.push(score);
       }
       return t;
     });

     return data;
   }

   function updateChart (chart, data) {
     chart.data.labels = [];
     for (let i = 0; i <= data.round; ++i) {
       chart.data.labels.push(`${i}`);
     }

     chart.data.datasets = data.teams.map(t => ({
       label: t.name,
       cubicInterpolationMode: 'monotone',
       data: t.scores,
       backgroundColor: ["rgba(255,255,255,0)"],
       borderColor: [stringToColor(t.name)],
       borderWidth: 1,
       total: t.scores.reduce((s,v) => s+v, 0),
     }));

     chart.data.datasets.sort((a,b) => {
       if (a.total < b.total) {
         return 1;
       } else if (a.total > b.total) {
         return -1;
       }

       return 0;
     });

     chart.update(0);
   }

   function fetchData () {
     return fetch('/game/stats.json')
       .then(r => r.json())
       .catch(e => console.error(e));
   }

   function cycle() {
     fetchData()
       .then(transformData)
       .then(d => updateChart(chart, d))
       .catch(e => console.error(e));
   }

   cycle();
   setInterval(cycle, 30 * 1000);
  </script>
{{> end }}
